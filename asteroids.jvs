import React, { useState, useEffect, useRef, useCallback } from 'react';

const AsteroidsGame = () => {
  const canvasRef = useRef(null);
  const [keys, setKeys] = useState({
    ArrowLeft: false,
    ArrowRight: false,
    ArrowUp: false,
    Space: false
  });

  const [ship, setShip] = useState({
    x: 400,
    y: 300,
    angle: -90,
    velocity: { x: 0, y: 0 }
  });

  const [asteroids, setAsteroids] = useState([]);
  const [bullets, setBullets] = useState([]);
  const [score, setScore] = useState(0);

  // Robust asteroid creation function
  const createAsteroid = (x, y, size) => {
    // Ensure default values
    const finalSize = size || (Math.random() * 40 + 20);
    const sides = Math.floor(Math.random() * 5) + 5; // 5-9 sides

    const vertices = Array.from({ length: sides }, () => ({
      angle: Math.random() * Math.PI * 2,
      distance: finalSize * (0.7 + Math.random() * 0.3)
    }));

    return {
      x: x || Math.random() * 800,
      y: y || Math.random() * 600,
      size: finalSize,
      dx: (Math.random() - 0.5) * 2,
      dy: (Math.random() - 0.5) * 2,
      vertices: vertices,
      rotation: 0
    };
  };

  // Initialize game
  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = 800;
    canvas.height = 600;

    // Generate initial asteroids with error handling
    const initialAsteroids = Array.from({ length: 6 }, () => {
      try {
        return createAsteroid();
      } catch (error) {
        console.error('Failed to create asteroid:', error);
        // Fallback asteroid if creation fails
        return {
          x: Math.random() * 800,
          y: Math.random() * 600,
          size: 30,
          dx: (Math.random() - 0.5) * 2,
          dy: (Math.random() - 0.5) * 2,
          vertices: [],
          rotation: 0
        };
      }
    });

    setAsteroids(initialAsteroids);
  }, []);

  // Keyboard event listeners
  useEffect(() => {
    const handleKeyDown = (e) => {
      setKeys(prev => ({
        ...prev,
        [e.code]: true
      }));
    };

    const handleKeyUp = (e) => {
      setKeys(prev => ({
        ...prev,
        [e.code]: false
      }));
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Game loop
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    const updateShip = () => {
      let newShip = { ...ship };
      const radians = newShip.angle * Math.PI / 180;

      // Rotation
      if (keys.ArrowLeft) {
        newShip.angle -= 5;
      }
      if (keys.ArrowRight) {
        newShip.angle += 5;
      }

      // Thrust
      if (keys.ArrowUp) {
        newShip.velocity.x += Math.cos(radians) * 0.2;
        newShip.velocity.y += Math.sin(radians) * 0.2;
      }

      // Damping
      newShip.velocity.x *= 0.99;
      newShip.velocity.y *= 0.99;

      // Update position
      newShip.x = (newShip.x + newShip.velocity.x + canvas.width) % canvas.width;
      newShip.y = (newShip.y + newShip.velocity.y + canvas.height) % canvas.height;

      setShip(newShip);
    };

    const updateBullets = () => {
      // Shoot bullet when space is pressed
      if (keys.Space) {
        const radians = ship.angle * Math.PI / 180;
        const newBullet = {
          x: ship.x,
          y: ship.y,
          dx: Math.cos(radians) * 5,
          dy: Math.sin(radians) * 5
        };
        setBullets(prev => [...prev, newBullet]);
      }

      // Check bullet-asteroid collisions and move bullets
      setBullets(prevBullets => {
        return prevBullets
          .map(bullet => ({
            ...bullet,
            x: bullet.x + bullet.dx,
            y: bullet.y + bullet.dy
          }))
          .filter(bullet => {
            // Check collision with asteroids
            const hitAsteroidIndex = asteroids.findIndex(asteroid => {
              // Ensure asteroid has size property
              const asteroidSize = asteroid.size || 20;
              const distance = Math.sqrt(
                Math.pow(bullet.x - asteroid.x, 2) + 
                Math.pow(bullet.y - asteroid.y, 2)
              );
              return distance < asteroidSize;
            });

            // If asteroid hit, remove it and the bullet
            if (hitAsteroidIndex !== -1) {
              setAsteroids(prevAsteroids => {
                const newAsteroids = [...prevAsteroids];
                const hittenAsteroid = newAsteroids[hitAsteroidIndex];
                
                // Ensure asteroid has size
                const asteroidSize = hittenAsteroid.size || 20;

                // Remove the asteroid or split it
                if (asteroidSize > 20) {
                  // Split asteroid into smaller ones
                  const newSize = asteroidSize / 2;
                  newAsteroids.splice(hitAsteroidIndex, 1);
                  newAsteroids.push(
                    createAsteroid(hittenAsteroid.x, hittenAsteroid.y, newSize),
                    createAsteroid(hittenAsteroid.x, hittenAsteroid.y, newSize)
                  );
                } else {
                  newAsteroids.splice(hitAsteroidIndex, 1);
                }
                
                // Increment score
                setScore(prev => prev + 10);
                
                return newAsteroids;
              });
              return false;
            }

            // Keep bullet if no collision and within screen
            return (
              bullet.x > 0 && bullet.x < canvas.width &&
              bullet.y > 0 && bullet.y < canvas.height
            );
          });
      });
    };

    const updateAsteroids = () => {
      setAsteroids(prev => 
        prev.map(asteroid => ({
          ...asteroid,
          x: (asteroid.x + (asteroid.dx || 0) + canvas.width) % canvas.width,
          y: (asteroid.y + (asteroid.dy || 0) + canvas.height) % canvas.height,
          rotation: (asteroid.rotation || 0) + 0.01 // Slow rotation
        }))
      );
    };

    const renderGame = () => {
      // Clear canvas
      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Render Ship
      ctx.save();
      ctx.translate(ship.x, ship.y);
      ctx.rotate(ship.angle * Math.PI / 180);
      ctx.strokeStyle = 'white';
      ctx.beginPath();
      ctx.moveTo(0, -15);  // Nose
      ctx.lineTo(-10, 15); // Left wing
      ctx.lineTo(10, 15);  // Right wing
      ctx.closePath();
      ctx.stroke();
      ctx.restore();

      // Render Asteroids with custom shape
      ctx.strokeStyle = 'white';
      asteroids.forEach(asteroid => {
        // Ensure asteroid has vertices
        if (!asteroid.vertices || asteroid.vertices.length === 0) {
          return; // Skip rendering if no vertices
        }

        ctx.save();
        ctx.translate(asteroid.x, asteroid.y);
        ctx.rotate(asteroid.rotation || 0);
        
        ctx.beginPath();
        asteroid.vertices.forEach((vertex, index) => {
          const x = Math.cos(vertex.angle) * vertex.distance;
          const y = Math.sin(vertex.angle) * vertex.distance;
          
          if (index === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
        });
        ctx.closePath();
        ctx.stroke();
        
        ctx.restore();
      });

      // Render Bullets
      ctx.fillStyle = 'white';
      bullets.forEach(bullet => {
        ctx.beginPath();
        ctx.arc(bullet.x, bullet.y, 3, 0, Math.PI * 2);
        ctx.fill();
      });

      // Render Score
      ctx.fillStyle = 'white';
      ctx.font = '20px Arial';
      ctx.fillText(`Score: ${score}`, 10, 30);
    };

    // Game loop
    const gameLoop = () => {
      updateShip();
      updateBullets();
      updateAsteroids();
      renderGame();

      requestAnimationFrame(gameLoop);
    };

    // Start game loop
    const animationFrame = requestAnimationFrame(gameLoop);

    // Cleanup
    return () => cancelAnimationFrame(animationFrame);
  }, [keys, ship, asteroids, bullets, score]);

  return (
    <div className="flex flex-col items-center justify-center bg-black min-h-screen">
      <canvas 
        ref={canvasRef} 
        className="border-2 border-white"
        tabIndex={0}
      />
      <div className="text-white mt-4">
        <p>Controls:</p>
        <p>← → Rotate | ↑ Thrust | Space Shoot</p>
      </div>
    </div>
  );
};

export default AsteroidsGame;
